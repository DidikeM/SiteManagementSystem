// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteManagementSystem.DataAccess.Concrete.EntityFramework;

#nullable disable

namespace SiteManagementSystem.DataAccess.Migrations
{
    [DbContext(typeof(SiteManagementSystemContext))]
    [Migration("20240215214528_Mig_3")]
    partial class Mig_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 3,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Konya"
                        });
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Çankaya"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Keçiören"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Yenimahalle"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Name = "Kadıköy"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            Name = "Beşiktaş"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Name = "Üsküdar"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            Name = "Bornova"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            Name = "Karşıyaka"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            Name = "Konak"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 4,
                            Name = "Selçuklu"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 4,
                            Name = "Meram"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 4,
                            Name = "Karatay"
                        });
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("FlatOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("FlatOwnerId");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.PersonNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonNotes");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteManagerId")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfHeating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("SiteManagerId")
                        .IsUnique()
                        .HasFilter("[SiteManagerId] IS NOT NULL");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Name = "Admin",
                            Password = "admin",
                            Surname = "Admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Block", b =>
                {
                    b.HasOne("SiteManagementSystem.Entities.Concrete.Site", "Site")
                        .WithMany("Blocks")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.District", b =>
                {
                    b.HasOne("SiteManagementSystem.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Flat", b =>
                {
                    b.HasOne("SiteManagementSystem.Entities.Concrete.Block", "Block")
                        .WithMany("Flats")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteManagementSystem.Entities.Concrete.Person", "FlatOwner")
                        .WithMany("OwnedFlats")
                        .HasForeignKey("FlatOwnerId");

                    b.HasOne("SiteManagementSystem.Entities.Concrete.Person", "Tenant")
                        .WithOne("TenantsFlat")
                        .HasForeignKey("SiteManagementSystem.Entities.Concrete.Flat", "TenantId");

                    b.Navigation("Block");

                    b.Navigation("FlatOwner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.PersonNote", b =>
                {
                    b.HasOne("SiteManagementSystem.Entities.Concrete.Person", "Person")
                        .WithMany("PersonNotes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Site", b =>
                {
                    b.HasOne("SiteManagementSystem.Entities.Concrete.District", "District")
                        .WithMany("Sites")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteManagementSystem.Entities.Concrete.User", "SiteManager")
                        .WithOne("Site")
                        .HasForeignKey("SiteManagementSystem.Entities.Concrete.Site", "SiteManagerId");

                    b.Navigation("District");

                    b.Navigation("SiteManager");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Block", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.District", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Person", b =>
                {
                    b.Navigation("OwnedFlats");

                    b.Navigation("PersonNotes");

                    b.Navigation("TenantsFlat");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.Site", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("SiteManagementSystem.Entities.Concrete.User", b =>
                {
                    b.Navigation("Site");
                });
#pragma warning restore 612, 618
        }
    }
}
